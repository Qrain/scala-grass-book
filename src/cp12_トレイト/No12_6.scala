package cp12_トレイト

/*
 * トレイト
 * Scalaが多重継承ではなくミックスイン合成を選んだ訳
 * ※多重継承との最大の違いは、トレイトの線形化という概念である。
 */
object No12_6 {

    def main(args: Array[String]) {
        /**
         * superを呼び出すメソッドを書いたとき、そのメソッドは
         * スーパークラスやミックスインされたトレイトの振る舞いを変更する。
         *
         * トレイトを利用するべきか否か？
         * ※「スケーラブルプログラミング」からの尊いガイドライン↓
         * ・振る舞いが利用されないならば、具象クラスにする。(再利用しない場合)
         * ・複数の無関係なクラスで再利用される可能性があるなら、トレイトにする。
         * ・Javaで継承できるようにしたいならば、抽象クラスを使う。
         * ・抽象メンバでのみ構成されたトレイトはJavaインターフェースに変換される。
         * ・ライブラリをコンパイル後形式で配布したい場合は、抽象クラスを使ったほうがいい。(トレイトだと変更後にクラスのリコンパイルが必要)
         * ・処理効率が非常に重視される場合はクラスを使ったほうが良いが、確固たる理由がある場合に限る。
         * ・以上を検討してみても、まだどちらが良いか判然としない場合は、とりあえずトレイトを使うとよい。
         */
    }
}

class 動物
trait 体毛 extends 動物
trait 有脚 extends 動物
trait 四足 extends 有脚
class 猫 extends 動物 with 体毛 with 四足


/*
 * 線形化順序
 * 猫⇒四足⇒有脚⇒体毛⇒動物⇒AnyRef⇒Any
 * superを介してのメソッド呼び出しは上記順序の右側の実装となる。
 */
