package cp08_関数とクロージャー
/*
 * 部分適用された関数
 * ※一部または0個の引数に対して関数を適用することを、部分適用という。
 */
object No8_6 {

    def main(args: Array[String]) {

        //最大公約数算出ローカル関数
        def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)

        //プレースホルダー(用意された場所)構文で、さらにコードの可読性が向上する。
        val list = List(103, 7, 0, 18, 85682, 6356, 35)

        //Scalaでは、引数を渡して関数を呼び出すことを、関数を引数に適用するという。
        //以下の式を与えられたScalaコンパイラは、ローカル関数gcdをラップしたそれぞれのクラスを生成する。
        val func0 = gcd _ //0個の引数に関数gcdを適用した関数オブジェクト
        val func1 = gcd(8, _: Int) //1個の引数に関数gcdを適用した関数オブジェクト

        println(func0(24, 68)) //全引数が_によって適用されていない為、func0のapplyメソッドの引数は2つになる。
        println(func1(64)) //1引数が_によって適用されていない為、func1のapplyメソッドの引数は1つになる。
    }
}
